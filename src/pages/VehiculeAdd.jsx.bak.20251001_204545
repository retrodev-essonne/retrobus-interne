// src/pages/VehiculeEdit.jsx
import React, { useEffect, useState } from 'react';
import {
  Box, Button, FormControl, FormLabel, Heading, Input, Select, Textarea,
  VStack, HStack, SimpleGrid, IconButton, useToast, Text, Divider
} from "@chakra-ui/react";
import { useNavigate, useParams } from "react-router-dom";
import { FiPlus, FiSave, FiTrash } from 'react-icons/fi';
import { useUser } from "../context/UserContext"; // <-- OK ici (import), pas d'appel !

const API_BASE = import.meta.env.VITE_API_URL || 'http://localhost:4000';

export default function VehicleEdit() {
  const { parc } = useParams();
  const { matricule } = useUser();

  const nav = useNavigate();
  const toast = useToast();

  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);

  useEffect(() => {
    fetch(`${API_BASE}/vehicles/${parc}`)
      .then(r => r.ok ? r.json() : Promise.reject())
      .then(setData)
      .catch(() => toast({ title: 'Véhicule introuvable', status: 'error' }))
      .finally(() => setLoading(false));
  }, [parc]);

  const updateField = (field, value) => {
    setData(d => ({ ...d, [field]: value }));
  };

  const updateCaracteristique = (index, key, value) => {
    setData(d => {
      const list = Array.isArray(d.caracteristiques) ? [...d.caracteristiques] : [];
      list[index] = { ...list[index], [key]: value };
      return { ...d, caracteristiques: list };
    });
  };

  const addCaracteristique = () => {
    setData(d => ({ ...d, caracteristiques: [...(d.caracteristiques || []), { label: '', value: '' }] }));
  };

  const removeCaracteristique = (i) => {
    setData(d => {
      const list = [...(d.caracteristiques || [])];
      list.splice(i, 1);
      return { ...d, caracteristiques: list };
    });
  };

  const save = () => {
    setSaving(true);
    fetch(`${API_BASE}/vehicles/${parc}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        "X-User-Matricule": matricule || "", // <-- on envoie le matricule
      },
      body: JSON.stringify({
        modele: data.modele,
        marque: data.marque,
        subtitle: data.subtitle,
        etat: data.etat,
        immat: data.immat,
        energie: data.energie,
        miseEnCirculation: data.miseEnCirculation,
        description: data.description,
        history: data.history,
        caracteristiques: data.caracteristiques,
        gallery: data.gallery
      })
    })
      .then(r => r.ok ? r.json() : Promise.reject())
      .then(() => toast({ title: 'Enregistré', status: 'success' }))
      .catch(() => toast({ title: 'Erreur sauvegarde', status: 'error' }))
      .finally(() => setSaving(false));
  };

  if (loading || !data) return <Box p={8}><Heading>Téléchargement...</Heading></Box>;

  return (
    <Box p={8}>
      <Heading mb={6}>Édition véhicule {parc}</Heading>
      <VStack align="stretch" spacing={6}>
        <SimpleGrid columns={{ base: 1, md: 2 }} spacing={4}>
          <Box>
            <Text fontWeight="bold">Marque</Text>
            <Input value={data.marque || ''} onChange={e => updateField('marque', e.target.value)} />
          </Box>
          <Box>
            <Text fontWeight="bold">Modèle</Text>
            <Input value={data.modele || ''} onChange={e => updateField('modele', e.target.value)} />
          </Box>
          <Box>
            <Text fontWeight="bold">Sous-titre</Text>
            <Input value={data.subtitle || ''} onChange={e => updateField('subtitle', e.target.value)} />
          </Box>
          <Box>
            <Text fontWeight="bold">Immat</Text>
            <Input value={data.immat || ''} onChange={e => updateField('immat', e.target.value)} />
          </Box>
          <Box>
            <Text fontWeight="bold">État</Text>
            <Input value={data.etat || ''} onChange={e => updateField('etat', e.target.value)} />
          </Box>
          <Box>
            <Text fontWeight="bold">Énergie</Text>
            <Input value={data.energie || ''} onChange={e => updateField('energie', e.target.value)} />
          </Box>
          <Box>
            <Text fontWeight="bold">Mise en circulation (YYYY-MM-DD)</Text>
            <Input value={data.miseEnCirculation || ''} onChange={e => updateField('miseEnCirculation', e.target.value)} />
          </Box>
        </SimpleGrid>

        <Box>
          <Text fontWeight="bold" mb={2}>Description</Text>
          <Textarea rows={5} value={data.description || ''} onChange={e => updateField('description', e.target.value)} />
        </Box>
        <Box>
          <Text fontWeight="bold" mb={2}>Histoire</Text>
          <Textarea rows={6} value={data.history || ''} onChange={e => updateField('history', e.target.value)} />
        </Box>

        <Divider />

        <Box>
          <HStack justify="space-between" mb={2}>
            <Text fontWeight="bold">Caractéristiques</Text>
            <Button size="sm" leftIcon={<FiPlus />} onClick={addCaracteristique}>Ajouter</Button>
          </HStack>
          <VStack align="stretch" spacing={3}>
            {(data.caracteristiques || []).map((c, i) => (
              <HStack key={i} align="flex-start">
                <Input placeholder="Label" value={c.label} onChange={e => updateCaracteristique(i, 'label', e.target.value)} />
                <Input placeholder="Valeur" value={c.value} onChange={e => updateCaracteristique(i, 'value', e.target.value)} />
                <IconButton aria-label="Remove" icon={<FiTrash />} size="sm" onClick={() => removeCaracteristique(i)} />
              </HStack>
            ))}
          </VStack>
        </Box>

        <Box>
          <Text fontWeight="bold" mb={2}>Galerie (URL ou chemins)</Text>
          <VStack align="stretch" spacing={2}>
            {Array.isArray(data.gallery) && data.gallery.map((g, i) => (
              <Input key={i} value={g} onChange={e => {
                const copy = [...data.gallery];
                copy[i] = e.target.value;
                updateField('gallery', copy);
              }} />
            ))}
            <Button size="sm" onClick={() => {
              updateField('gallery', [...(data.gallery || []), '']);
            }}>Ajouter entrée</Button>
          </VStack>
        </Box>

        <Button colorScheme="blue" leftIcon={<FiSave />} onClick={save} isLoading={saving}>
          Enregistrer
        </Button>
      </VStack>

      {/* Petit composant pour uploader vers /vehicles/:parc/gallery */}
      <Box mt={8}>
        <Text fontWeight="bold" mb={2}>Uploader des images</Text>
        <GalleryUploader parc={parc} onAdded={newGallery => updateField('gallery', newGallery)} />
      </Box>
    </Box>
  );
}

// Petit composant pour uploader vers /vehicles/:parc/gallery
function GalleryUploader({ parc, onAdded }) {
  const [files,setFiles] = useState([]);
  const toast = useToast();

  const send = () => {
    const fd = new FormData();
    files.forEach(f => fd.append('images', f));
    fetch(`${API_BASE}/vehicles/${parc}/gallery`, { method:'POST', body: fd })
      .then(r=> r.ok ? r.json() : Promise.reject())
      .then(j => {
        toast({ title:'Images ajoutées', status:'success'});
        onAdded && onAdded(j.gallery);
      })
      .catch(()=> toast({ title:'Erreur upload', status:'error'}));
  };

  return (
    <Box>
      <Input type="file" multiple onChange={e=> setFiles([...e.target.files])} />
      <Button mt={2} size="sm" onClick={send} isDisabled={!files.length}>Uploader</Button>
    </Box>
  );
}
