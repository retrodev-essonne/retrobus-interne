import React, { useEffect, useState, useCallback } from 'react';
import {
  Box, Button, FormControl, FormLabel, Heading, Input, Select, Textarea,
  VStack, HStack, SimpleGrid, useToast, Text, Divider,
  Tabs, TabList, TabPanels, Tab, TabPanel, Card, CardBody, Badge,
  Spinner, Center, Flex
} from "@chakra-ui/react";
import { useNavigate, useParams } from "react-router-dom";
import { FiArrowLeft, FiExternalLink, FiSave } from 'react-icons/fi';
import { apiClient } from '../api/config';
import GalleryManager from '../components/vehicle/GalleryManager.jsx';
import CaracteristiquesEditor from '../components/vehicle/CaracteristiquesEditor.jsx';

const PUBLIC_BASE = import.meta.env.VITE_PUBLIC_BASE || window.location.origin;

function EtatBadge({ etat }) {
  const colorMap = {
    "disponible": "green",
    "en_panne": "red",
    "maintenance": "orange",
    "Service": "green",
    "Préservé": "blue",
    "A VENIR": "gray",
    "Restauration": "orange"
  };
  return <Badge colorScheme={colorMap[etat] || "purple"}>{etat}</Badge>;
}

export default function VehiculeShow() {
  const { parc } = useParams();
  const navigate = useNavigate();
  const toast = useToast();

  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);

  const [vehicle, setVehicle] = useState(null);
  const [basicInfo, setBasicInfo] = useState({});
  const [usages, setUsages] = useState([]);
  const [reports, setReports] = useState([]);
  const [newUsage, setNewUsage] = useState({});
  const [newReport, setNewReport] = useState({});

  const loadAll = useCallback(async () => {
    if (!parc) return;
    setLoading(true);
    try {
      const vReq = apiClient.get(`/vehicles/${parc}`);
      const uReq = apiClient.get(`/vehicles/${parc}/usages`);
      const rReq = apiClient.get(`/vehicles/${parc}/reports`);
      const [v, u, r] = await Promise.allSettled([vReq, uReq, rReq]);
      if (v.status === 'fulfilled') {
        setVehicle(v.value);
        setBasicInfo(v.value);
      } else throw new Error('Véhicule introuvable');
      if (u.status === 'fulfilled') setUsages(u.value);
      if (r.status === 'fulfilled') setReports(r.value);
    } catch (e) {
      toast({ status: 'error', title: e.message || 'Erreur chargement' });
      navigate('/dashboard/vehicules');
    } finally {
      setLoading(false);
    }
  }, [parc, toast, navigate]);

  useEffect(() => {
    loadAll();
  }, [loadAll]);

  const save = async () => {
    try {
      setSaving(true);
      await apiClient.put(`/vehicles/${parc}`, {
        etat: basicInfo.etat,
        marque: basicInfo.marque,
        modele: basicInfo.modele,
        type: basicInfo.type,
        immat: basicInfo.immat,
        subtitle: basicInfo.subtitle,
        description: basicInfo.description,
        history: basicInfo.history,
        caracteristiques: basicInfo.caracteristiques,
        gallery: basicInfo.gallery
      });
      toast({ status: 'success', title: 'Sauvegardé' });
    } catch {
      toast({ status: 'error', title: 'Erreur sauvegarde' });
    } finally {
      setSaving(false);
    }
  };

  const addUsage = async () => {
    if (!newUsage.startedAt) {
      toast({ status: 'error', title: 'Date début requise' });
      return;
    }
    try {
      await apiClient.post(`/vehicles/${parc}/usages`, newUsage);
      setNewUsage({});
      loadAll();
      toast({ status: 'success', title: 'Usage ajouté' });
    } catch {
      toast({ status: 'error', title: 'Erreur ajout usage' });
    }
  };

  const addReport = async () => {
    if (!newReport.description) {
      toast({ status: 'error', title: 'Description requise' });
      return;
    }
    try {
      await apiClient.post(`/vehicles/${parc}/reports`, newReport);
      setNewReport({});
      loadAll();
      toast({ status: 'success', title: 'Rapport ajouté' });
    } catch {
      toast({ status: 'error', title: 'Erreur ajout rapport' });
    }
  };

  if (loading) return <Center h="60vh"><Spinner size="xl" /></Center>;
  if (!vehicle) return null;

  return (
    <Box p={8}>
      <Flex align="center" justify="space-between" mb={6}>
        <HStack>
          <Button
            leftIcon={<FiArrowLeft />}
            variant="ghost"
            onClick={() => navigate('/dashboard/vehicules')}
          >
            Retour
          </Button>
          <Heading size="lg">Véhicule {vehicle.parc}</Heading>
            <EtatBadge etat={vehicle.etat} />
        </HStack>
        <Button
          leftIcon={<FiExternalLink />}
          colorScheme="blue"
          variant="outline"
          onClick={() => window.open(`${PUBLIC_BASE}/vehicule/${parc}`, '_blank')}
        >
          Page publique
        </Button>
      </Flex>

      <Tabs>
        <TabList>
          <Tab>Informations</Tab>
          <Tab>Entretien</Tab>
          <Tab>Usages</Tab>
        </TabList>
        <TabPanels>
          <TabPanel>
            <VStack spacing={8} align="stretch">
              <SimpleGrid columns={{ base:1, md:2 }} spacing={4}>
                <FormControl>
                  <FormLabel>Parc</FormLabel>
                  <Input value={vehicle.parc} isReadOnly bg="gray.50" />
                </FormControl>
                <FormControl>
                  <FormLabel>État</FormLabel>
                  <Select
                    value={basicInfo.etat || ''}
                    onChange={e => setBasicInfo(b => ({ ...b, etat: e.target.value }))}
                  >
                    <option value="disponible">Disponible</option>
                    <option value="en_panne">En panne</option>
                    <option value="maintenance">Maintenance</option>
                    <option value="Préservé">Préservé</option>
                    <option value="Service">Service</option>
                  </Select>
                </FormControl>
                <FormControl>
                  <FormLabel>Marque</FormLabel>
                  <Input
                    value={basicInfo.marque || ''}
                    onChange={e => setBasicInfo(b => ({ ...b, marque: e.target.value }))}
                  />
                </FormControl>
                <FormControl>
                  <FormLabel>Modèle</FormLabel>
                  <Input
                    value={basicInfo.modele || ''}
                    onChange={e => setBasicInfo(b => ({ ...b, modele: e.target.value }))}
                  />
                </FormControl>
                <FormControl>
                  <FormLabel>Type</FormLabel>
                  <Select
                    value={basicInfo.type || ''}
                    onChange={e => setBasicInfo(b => ({ ...b, type: e.target.value }))}
                  >
                    <option value="Bus">Bus</option>
                    <option value="Car">Car</option>
                    <option value="Minibus">Minibus</option>
                  </Select>
                </FormControl>
                <FormControl>
                  <FormLabel>Immatriculation</FormLabel>
                  <Input
                    value={basicInfo.immat || ''}
                    onChange={e => setBasicInfo(b => ({ ...b, immat: e.target.value }))}
                  />
                </FormControl>
              </SimpleGrid>

              <FormControl>
                <FormLabel>Sous-titre</FormLabel>
                <Input
                  value={basicInfo.subtitle || ''}
                  onChange={e => setBasicInfo(b => ({ ...b, subtitle: e.target.value }))}
                />
              </FormControl>

              <FormControl>
                <FormLabel>Description</FormLabel>
                <Textarea
                  value={basicInfo.description || ''}
                  onChange={e => setBasicInfo(b => ({ ...b, description: e.target.value }))}
                  rows={4}
                />
              </FormControl>

              <FormControl>
                <FormLabel>Historique</FormLabel>
                <Textarea
                  value={basicInfo.history || ''}
                  onChange={e => setBasicInfo(b => ({ ...b, history: e.target.value }))}
                  rows={6}
                />
              </FormControl>

              <CaracteristiquesEditor
                value={basicInfo.caracteristiques || []}
                onChange={list => setBasicInfo(b => ({ ...b, caracteristiques: list }))}
              />

              <Divider />
              <Heading size="md">Galerie</Heading>
              <GalleryManager
                value={basicInfo.gallery || []}
                onChange={gallery => setBasicInfo(b => ({ ...b, gallery }))}
                uploadEndpoint={`${apiClient.baseURL}/vehicles/${parc}/gallery`}
                deleteEndpoint={`${apiClient.baseURL}/vehicles/${parc}/gallery`}
                authHeader={apiClient.authHeader}
              />

              <Button
                leftIcon={<FiSave />}
                colorScheme="blue"
                onClick={save}
                isLoading={saving}
              >
                Sauvegarder
              </Button>
            </VStack>
          </TabPanel>

          <TabPanel>
            <VStack spacing={6} align="stretch">
              <Heading size="md">Ajouter un rapport</Heading>
              <Textarea
                placeholder="Description du rapport"
                value={newReport.description || ''}
                onChange={e => setNewReport(r => ({ ...r, description: e.target.value }))}
              />
              <Button colorScheme="green" onClick={addReport}>Ajouter</Button>
              <Divider />
              <Heading size="md">Rapports</Heading>
              {reports.map((r, i) => (
                <Card key={i}>
                  <CardBody>
                    <Text>{r.description}</Text>
                    <Text fontSize="sm" color="gray.500">
                      {new Date(r.createdAt).toLocaleString()}
                    </Text>
                  </CardBody>
                </Card>
              ))}
              {!reports.length && <Text color="gray.500">Aucun rapport.</Text>}
            </VStack>
          </TabPanel>

          <TabPanel>
            <VStack spacing={6} align="stretch">
              <Heading size="md">Nouvel usage</Heading>
              <SimpleGrid columns={{ base:1, md:2 }} spacing={4}>
                <FormControl>
                  <FormLabel>Date de début</FormLabel>
                  <Input
                    type="datetime-local"
                    value={newUsage.startedAt || ''}
                    onChange={e => setNewUsage(u => ({ ...u, startedAt: e.target.value }))}
                  />
                </FormControl>
                <FormControl>
                  <FormLabel>Date de fin</FormLabel>
                  <Input
                    type="datetime-local"
                    value={newUsage.endedAt || ''}
                    onChange={e => setNewUsage(u => ({ ...u, endedAt: e.target.value }))}
                  />
                </FormControl>
                <FormControl>
                  <FormLabel>Conducteur</FormLabel>
                  <Input
                    value={newUsage.conducteur || ''}
                    onChange={e => setNewUsage(u => ({ ...u, conducteur: e.target.value }))}
                  />
                </FormControl>
                <FormControl>
                  <FormLabel>Participants</FormLabel>
                  <Input
                    value={newUsage.participants || ''}
                    onChange={e => setNewUsage(u => ({ ...u, participants: e.target.value }))}
                  />
                </FormControl>
              </SimpleGrid>
              <FormControl>
                <FormLabel>Note</FormLabel>
                <Textarea
                  value={newUsage.note || ''}
                  onChange={e => setNewUsage(u => ({ ...u, note: e.target.value }))}
                />
              </FormControl>
              <Button colorScheme="green" onClick={addUsage}>Ajouter usage</Button>
              <Divider />
              <Heading size="md">Historique des usages</Heading>
              {usages.map((u, i) => (
                <Card key={i}>
                  <CardBody>
                    <VStack align="start" spacing={1}>
                      <Text fontWeight="bold">
                        {new Date(u.startedAt).toLocaleDateString()}
                        {'  '}
                        {u.endedAt ? new Date(u.endedAt).toLocaleDateString() : 'En cours'}
                      </Text>
                      {u.conducteur && <Text>Conducteur: {u.conducteur}</Text>}
                      {u.participants && <Text>Participants: {u.participants}</Text>}
                      {u.note && <Text fontSize="sm">{u.note}</Text>}
                    </VStack>
                  </CardBody>
                </Card>
              ))}
              {!usages.length && <Text color="gray.500">Aucun usage.</Text>}
            </VStack>
          </TabPanel>
        </TabPanels>
      </Tabs>
    </Box>
  );
}
