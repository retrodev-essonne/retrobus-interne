import React, { useEffect, useState, useCallback, useRef } from 'react';
import {
  Box, Button, FormControl, FormLabel, Heading, Input, Select, Textarea,
  VStack, HStack, SimpleGrid, IconButton, useToast, Text, Divider,
  Tabs, TabList, TabPanels, Tab, TabPanel, Card, CardBody, Badge,
  Modal, ModalOverlay, ModalContent, ModalHeader, ModalCloseButton, ModalBody,
  Spinner, Center, Flex, Image
} from "@chakra-ui/react";
import { useNavigate, useParams } from "react-router-dom";
import { QRCodeCanvas } from "qrcode.react";
import { FiArrowLeft, FiDownload, FiUpload, FiX, FiExternalLink, FiTrash2, FiChevronUp, FiChevronDown, FiSave } from 'react-icons/fi';
import { apiClient } from '../api/config';

const PUBLIC_BASE = import.meta.env.VITE_PUBLIC_BASE || window.location.origin;

function EtatBadge({ etat }) {
  const colorMap = { 
    "disponible": "green", 
    "en_panne": "red", 
    "maintenance": "orange",
    "Service": "green", 
    "Préservé": "blue", 
    "A VENIR": "gray",
    "Restauration": "orange"
  };
  const color = colorMap[etat] || "purple";
  return <Badge colorScheme={color}>{etat}</Badge>;
}

export default function VehiculeShow() {
  const { parc } = useParams();
  const navigate = useNavigate();
  const [vehicle, setVehicle] = useState(null);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [usages, setUsages] = useState([]);
  const [reports, setReports] = useState([]);
  const toast = useToast();

  // États pour les formulaires
  const [basicInfo, setBasicInfo] = useState({});
  const [newUsage, setNewUsage] = useState({});
  const [newReport, setNewReport] = useState({});

  // Charger les données du véhicule
  const loadVehicle = useCallback(async () => {
    if (!parc) return;
    try {
      setLoading(true);
      const data = await apiClient.get(`/vehicles/${parc}`);
      setVehicle(data);
      setBasicInfo(data);
    } catch (error) {
      console.error('Erreur lors du chargement:', error);
      toast({ status: 'error', title: 'Véhicule non trouvé' });
      navigate('/dashboard/vehicules');
    } finally {
      setLoading(false);
    }
  }, [parc, toast, navigate]);

  // Charger les usages
  const loadUsages = useCallback(async () => {
    if (!parc) return;
    try {
      const data = await apiClient.get(`/vehicles/${parc}/usages`);
      setUsages(data);
    } catch (error) {
      console.error('Erreur usages:', error);
    }
  }, [parc]);

  // Charger les rapports
  const loadReports = useCallback(async () => {
    if (!parc) return;
    try {
      const data = await apiClient.get(`/vehicles/${parc}/reports`);
      setReports(data);
    } catch (error) {
      console.error('Erreur rapports:', error);
    }
  }, [parc]);

  useEffect(() => {
    loadVehicle();
    loadUsages();
    loadReports();
  }, [loadVehicle, loadUsages, loadReports]);

  // Sauvegarder les informations de base
  const saveBasicInfo = async () => {
    try {
      setSaving(true);
      await apiClient.put(`/vehicles/${parc}`, basicInfo);
      setVehicle({ ...vehicle, ...basicInfo });
      toast({ status: 'success', title: 'Véhicule mis à jour' });
    } catch (error) {
      console.error('Erreur sauvegarde:', error);
      toast({ status: 'error', title: 'Erreur de sauvegarde' });
    } finally {
      setSaving(false);
    }
  };

  // Ajouter un usage
  const addUsage = async () => {
    if (!newUsage.startedAt) {
      toast({ status: 'error', title: 'Date de début requise' });
      return;
    }
    try {
      await apiClient.post(`/vehicles/${parc}/usages`, newUsage);
      setNewUsage({});
      loadUsages();
      toast({ status: 'success', title: 'Usage ajouté' });
    } catch (error) {
      toast({ status: 'error', title: 'Erreur ajout usage' });
    }
  };

  // Ajouter un rapport
  const addReport = async () => {
    if (!newReport.description) {
      toast({ status: 'error', title: 'Description requise' });
      return;
    }
    try {
      await apiClient.post(`/vehicles/${parc}/reports`, newReport);
      setNewReport({});
      loadReports();
      toast({ status: 'success', title: 'Rapport ajouté' });
    } catch (error) {
      toast({ status: 'error', title: 'Erreur ajout rapport' });
    }
  };

  const moveGalleryItem = (index, dir) => {
    setBasicInfo(b => {
      const gal = Array.isArray(b.gallery) ? [...b.gallery] : [];
      const target = index + dir;
      if (target < 0 || target >= gal.length) return b;
      [gal[index], gal[target]] = [gal[target], gal[index]];
      return { ...b, gallery: gal };
    });
  };

  const uploadGalleryFiles = async (files) => {
    const fd = new FormData();
    [...files].forEach(f => fd.append('images', f));
    try {
      const res = await fetch(`${apiClient.baseURL}/vehicles/${parc}/gallery`, {
        method:'POST',
        headers: { 'Authorization': apiClient.authHeader },
        body: fd
      });
      if (!res.ok) throw new Error();
      const j = await res.json();
      setBasicInfo(b => ({ ...b, gallery: j.gallery }));
      toast({ status:'success', title:'Images ajoutées' });
    } catch {
      toast({ status:'error', title:'Upload galerie échoué' });
    }
  };

  const uploadBackground = async (file) => {
    const fd = new FormData();
    fd.append('image', file);
    try {
      const res = await fetch(`${apiClient.baseURL}/vehicles/${parc}/background`, {
        method:'POST',
        headers: { 'Authorization': apiClient.authHeader },
        body: fd
      });
      if (!res.ok) throw new Error();
      const j = await res.json();
      setBasicInfo(b => ({ ...b, backgroundImage: j.backgroundImage }));
      toast({ status:'success', title:'Fond mis à jour' });
    } catch {
      toast({ status:'error', title:'Upload fond échoué' });
    }
  };

  const handleBackgroundClick = (e) => {
    const rect = e.currentTarget.getBoundingClientRect();
    const x = ((e.clientX - rect.left) / rect.width) * 100;
    const y = ((e.clientY - rect.top) / rect.height) * 100;
    const pos = `${x.toFixed(1)}% ${y.toFixed(1)}%`;
    setBasicInfo(b => ({ ...b, backgroundPosition: pos }));
  };

  const saveBackgroundPosition = async () => {
    try {
      await apiClient.put(`/vehicles/${parc}`, {
        ...basicInfo,
        backgroundPosition: basicInfo.backgroundPosition
      });
      toast({ status:'success', title:'Position sauvegardée' });
    } catch {
      toast({ status:'error', title:'Erreur sauvegarde position' });
    }
  };

  if (loading) return <Center h="60vh"><Spinner size="xl" /></Center>;

  if (!vehicle) {
    return (
      <Box p={8}>
        <Text>Véhicule non trouvé</Text>
        <Button onClick={() => navigate('/dashboard/vehicules')}>Retour à la liste</Button>
      </Box>
    );
  }

  return (
    <Box p={8}>
      {/* Header */}
      <Flex align="center" justify="space-between" mb={6}>
        <HStack>
          <Button 
            leftIcon={<FiArrowLeft />} 
            variant="ghost" 
            onClick={() => navigate('/dashboard/vehicules')}
          >
            Retour
          </Button>
          <Heading size="lg">Véhicule {vehicle.parc}</Heading>
          <EtatBadge etat={vehicle.etat} />
        </HStack>
        <Button 
          leftIcon={<FiExternalLink />}
          colorScheme="blue"
          variant="outline"
          onClick={() => window.open(`${PUBLIC_BASE}/vehicule/${parc}`, '_blank')}
        >
          Voir page publique
        </Button>
      </Flex>

      {/* Tabs */}
      <Tabs>
        <TabList>
          <Tab>Informations générales</Tab>
          <Tab>Carnet d'entretien</Tab>
          <Tab>Suivi d'utilisation</Tab>
        </TabList>

        <TabPanels>
          {/* Tab 1: Informations générales */}
          <TabPanel>
            <VStack spacing={6} align="stretch">
              <SimpleGrid columns={{ base: 1, md: 2 }} spacing={4}>
                <FormControl>
                  <FormLabel>Parc</FormLabel>
                  <Input value={vehicle.parc} isReadOnly bg="gray.50" />
                </FormControl>
                <FormControl>
                  <FormLabel>État</FormLabel>
                  <Select 
                    value={basicInfo.etat || ''} 
                    onChange={(e) => setBasicInfo({...basicInfo, etat: e.target.value})}
                  >
                    <option value="disponible">Disponible</option>
                    <option value="en_panne">En panne</option>
                    <option value="maintenance">Maintenance</option>
                    <option value="Préservé">Préservé</option>
                    <option value="Service">Service</option>
                  </Select>
                </FormControl>
                <FormControl>
                  <FormLabel>Marque</FormLabel>
                  <Input 
                    value={basicInfo.marque || ''} 
                    onChange={(e) => setBasicInfo({...basicInfo, marque: e.target.value})}
                  />
                </FormControl>
                <FormControl>
                  <FormLabel>Modèle</FormLabel>
                  <Input 
                    value={basicInfo.modele || ''} 
                    onChange={(e) => setBasicInfo({...basicInfo, modele: e.target.value})}
                  />
                </FormControl>
                <FormControl>
                  <FormLabel>Type</FormLabel>
                  <Select 
                    value={basicInfo.type || ''} 
                    onChange={(e) => setBasicInfo({...basicInfo, type: e.target.value})}
                  >
                    <option value="Bus">Bus</option>
                    <option value="Car">Car</option>
                    <option value="Minibus">Minibus</option>
                  </Select>
                </FormControl>
                <FormControl>
                  <FormLabel>Immatriculation</FormLabel>
                  <Input 
                    value={basicInfo.immat || ''} 
                    onChange={(e) => setBasicInfo({...basicInfo, immat: e.target.value})}
                  />
                </FormControl>
                <FormControl>
                  <FormLabel>Galerie</FormLabel>
                  <VStack align="stretch" spacing={4}>
                    <Input
                      type="file"
                      multiple
                      accept="image/*"
                      onChange={e => e.target.files && uploadGalleryFiles(e.target.files)}
                    />
                    <SimpleGrid columns={{ base: 2, md: 4 }} spacing={3}>
                      {(basicInfo.gallery || []).map((g, i) => (
                        <Box key={g + i} border="1px solid" borderColor="gray.200" borderRadius="md" p={1}>
                          <Image src={g} w="100%" h="110px" objectFit="cover" borderRadius="sm" />
                          <HStack mt={1} justify="space-between">
                            <HStack>
                              <IconButton
                                aria-label="Monter"
                                icon={<FiChevronUp />}
                                size="xs"
                                onClick={() => moveGalleryItem(i, -1)}
                                isDisabled={i === 0}
                              />
                              <IconButton
                                aria-label="Descendre"
                                icon={<FiChevronDown />}
                                size="xs"
                                onClick={() => moveGalleryItem(i, +1)}
                                isDisabled={i === (basicInfo.gallery.length - 1)}
                              />
                            </HStack>
                            <IconButton
                              aria-label="Supprimer"
                              icon={<FiTrash2 />}
                              size="xs"
                              colorScheme="red"
                              onClick={async () => {
                                try {
                                  const res = await fetch(`${apiClient.baseURL}/vehicles/${parc}/gallery`, {
                                    method:'DELETE',
                                    headers:{
                                      'Content-Type':'application/json',
                                      'Authorization': apiClient.authHeader
                                    },
                                    body: JSON.stringify({ image: g })
                                  });
                                  if (!res.ok) throw new Error();
                                  const j = await res.json();
                                  setBasicInfo(b => ({ ...b, gallery: j.gallery }));
                                } catch {
                                  // fallback suppression locale
                                  setBasicInfo(b => ({ ...b, gallery: b.gallery.filter(x => x !== g) }));
                                }
                              }}
                            />
                          </HStack>
                        </Box>
                      ))}
                    </SimpleGrid>
                  </VStack>
                </FormControl>
              </SimpleGrid>

              <FormControl>
                <FormLabel>Sous-titre</FormLabel>
                <Input 
                  value={basicInfo.subtitle || ''} 
                  onChange={(e) => setBasicInfo({...basicInfo, subtitle: e.target.value})}
                />
              </FormControl>

              <FormControl>
                <FormLabel>Description</FormLabel>
                <Textarea 
                  value={basicInfo.description || ''} 
                  onChange={(e) => setBasicInfo({...basicInfo, description: e.target.value})}
                  rows={4}
                />
              </FormControl>

              <FormControl>
                <FormLabel>Historique</FormLabel>
                <Textarea 
                  value={basicInfo.history || ''} 
                  onChange={(e) => setBasicInfo({...basicInfo, history: e.target.value})}
                  rows={6}
                />
              </FormControl>

              <FormControl>
                <FormLabel>Image de fond</FormLabel>
                <VStack align="stretch" spacing={3}>
                  <Input
                    type="file"
                    accept="image/*"
                    onChange={e => e.target.files?.[0] && uploadBackground(e.target.files[0])}
                  />
                  {basicInfo.backgroundImage && (
                    <Box
                      border="1px solid"
                      borderColor="gray.300"
                      borderRadius="md"
                      overflow="hidden"
                      cursor="crosshair"
                      onClick={handleBackgroundClick}
                      w="100%"
                      maxW="600px"
                      h="260px"
                      backgroundImage={`url(${basicInfo.backgroundImage})`}
                      backgroundSize="cover"
                      backgroundPosition={basicInfo.backgroundPosition || '50% 50%'}
                      position="relative"
                    >
                      {basicInfo.backgroundPosition && (
                        <Box
                          position="absolute"
                          w="14px"
                          h="14px"
                          bg="red.400"
                          borderRadius="full"
                          transform="translate(-50%, -50%)"
                          boxShadow="0 0 0 2px white"
                          style={{
                            left: basicInfo.backgroundPosition.split(' ')[0],
                            top: basicInfo.backgroundPosition.split(' ')[1]
                          }}
                        />
                      )}
                    </Box>
                  )}
                  <HStack>
                    <Input
                      placeholder="Ex: 50% 50%"
                      value={basicInfo.backgroundPosition || ''}
                      onChange={e => setBasicInfo(b => ({ ...b, backgroundPosition: e.target.value }))}
                    />
                    <Button size="sm" leftIcon={<FiSave />} onClick={saveBackgroundPosition}>
                      Sauver position
                    </Button>
                  </HStack>
                </VStack>
              </FormControl>

              <Button 
                colorScheme="blue" 
                onClick={saveBasicInfo} 
                isLoading={saving}
                loadingText="Sauvegarde..."
              >
                Sauvegarder
              </Button>
            </VStack>
          </TabPanel>

          {/* Tab 2: Carnet d'entretien */}
          <TabPanel>
            <VStack spacing={6} align="stretch">
              <Heading size="md">Ajouter un rapport</Heading>
              <HStack>
                <Textarea 
                  placeholder="Description du rapport..."
                  value={newReport.description || ''}
                  onChange={(e) => setNewReport({...newReport, description: e.target.value})}
                />
                <Button colorScheme="green" onClick={addReport}>Ajouter</Button>
              </HStack>

              <Divider />

              <Heading size="md">Rapports d'entretien</Heading>
              {reports.map((report, i) => (
                <Card key={i}>
                  <CardBody>
                    <Text>{report.description}</Text>
                    <Text fontSize="sm" color="gray.500">
                      {new Date(report.createdAt).toLocaleDateString()}
                    </Text>
                  </CardBody>
                </Card>
              ))}
            </VStack>
          </TabPanel>

          {/* Tab 3: Suivi d'utilisation */}
          <TabPanel>
            <VStack spacing={6} align="stretch">
              <Heading size="md">Nouvel usage</Heading>
              <SimpleGrid columns={{ base: 1, md: 2 }} spacing={4}>
                <FormControl>
                  <FormLabel>Date de début</FormLabel>
                  <Input 
                    type="datetime-local"
                    value={newUsage.startedAt || ''}
                    onChange={(e) => setNewUsage({...newUsage, startedAt: e.target.value})}
                  />
                </FormControl>
                <FormControl>
                  <FormLabel>Date de fin</FormLabel>
                  <Input 
                    type="datetime-local"
                    value={newUsage.endedAt || ''}
                    onChange={(e) => setNewUsage({...newUsage, endedAt: e.target.value})}
                  />
                </FormControl>
                <FormControl>
                  <FormLabel>Conducteur</FormLabel>
                  <Input 
                    value={newUsage.conducteur || ''}
                    onChange={(e) => setNewUsage({...newUsage, conducteur: e.target.value})}
                  />
                </FormControl>
                <FormControl>
                  <FormLabel>Participants</FormLabel>
                  <Input 
                    value={newUsage.participants || ''}
                    onChange={(e) => setNewUsage({...newUsage, participants: e.target.value})}
                  />
                </FormControl>
              </SimpleGrid>
              <FormControl>
                <FormLabel>Note</FormLabel>
                <Textarea 
                  value={newUsage.note || ''}
                  onChange={(e) => setNewUsage({...newUsage, note: e.target.value})}
                />
              </FormControl>
              <Button colorScheme="green" onClick={addUsage}>Ajouter usage</Button>

              <Divider />

              <Heading size="md">Historique des usages</Heading>
              {usages.map((usage, i) => (
                <Card key={i}>
                  <CardBody>
                    <HStack justify="space-between">
                      <VStack align="start">
                        <Text fontWeight="bold">
                          {new Date(usage.startedAt).toLocaleDateString()} - 
                          {usage.endedAt ? new Date(usage.endedAt).toLocaleDateString() : 'En cours'}
                        </Text>
                        {usage.conducteur && <Text>Conducteur: {usage.conducteur}</Text>}
                        {usage.participants && <Text>Participants: {usage.participants}</Text>}
                        {usage.note && <Text fontSize="sm">{usage.note}</Text>}
                      </VStack>
                    </HStack>
                  </CardBody>
                </Card>
              ))}
            </VStack>
          </TabPanel>
        </TabPanels>
      </Tabs>
    </Box>
  );
}
