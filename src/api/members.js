import { apiClient, API_BASE_URL } from './config.js';

export const membersAPI = {
  baseURL: API_BASE_URL,
  
  async getAll() {
    try {
      console.log('üîç Chargement des membres...');
      
      // Maintenant on utilise le bon endpoint
      const response = await apiClient.get('/api/members');
      console.log('‚úÖ Membres charg√©s:', response);
      return response;
      
    } catch (error) {
      console.error('‚ùå Erreur chargement membres:', error);
      throw new Error(`Impossible de charger les membres: ${error.message}`);
    }
  },

  async getById(id) {
    try {
      const response = await apiClient.get(`/api/members/${id}`);
      return response;
    } catch (error) {
      console.error('‚ùå Erreur getById:', error);
      throw error;
    }
  },

  async create(memberData) {
    try {
      console.log('üë§ Cr√©ation membre:', memberData);
      const response = await apiClient.post('/api/members', memberData);
      console.log('‚úÖ Membre cr√©√©:', response);
      return response;
    } catch (error) {
      console.error('‚ùå Erreur cr√©ation membre:', error);
      throw error;
    }
  },

  async createWithLogin(memberData) {
    try {
      console.log('üë§ Cr√©ation membre avec login:', memberData);
      const response = await apiClient.post('/api/members/create-with-login', memberData);
      console.log('‚úÖ Membre avec login cr√©√©:', response);
      return response;
    } catch (error) {
      console.error('‚ùå Erreur createWithLogin:', error);
      throw error;
    }
  },

  async update(id, updates) {
    try {
      const response = await apiClient.patch(`/api/members/${id}`, updates);
      return response;
    } catch (error) {
      console.error('‚ùå Erreur update:', error);
      throw error;
    }
  },

  async resetPassword(id) {
    try {
      const response = await apiClient.post(`/api/members/${id}/reset-password`);
      return response;
    } catch (error) {
      console.error('‚ùå Erreur resetPassword:', error);
      throw error;
    }
  },

  async delete(id) {
    try {
      await apiClient.delete(`/api/members/${id}`);
    } catch (error) {
      console.error('‚ùå Erreur delete:', error);
      throw error;
    }
  },

  async testConnectivity() {
    try {
      console.log('üîç Test de connectivit√© API...');
      const response = await apiClient.get('/health');
      console.log('‚úÖ API accessible:', response);
      return true;
    } catch (error) {
      console.error('‚ùå API inaccessible:', error);
      return false;
    }
  }
};
